[{"/Users/priska/HobbyProjects/portfolio/src/index.js":"1","/Users/priska/HobbyProjects/portfolio/src/reportWebVitals.js":"2","/Users/priska/HobbyProjects/portfolio/src/App.js":"3","/Users/priska/HobbyProjects/portfolio/src/Home.js":"4","/Users/priska/HobbyProjects/portfolio/src/components/light-box/LightBoxWrapper.js":"5","/Users/priska/HobbyProjects/portfolio/src/components/light-box/LightBoxArrowButton.js":"6","/Users/priska/HobbyProjects/portfolio/src/components/light-box/LightBoxButtonControl.js":"7","/Users/priska/HobbyProjects/portfolio/src/pages/projects/Projects.js":"8","/Users/priska/HobbyProjects/portfolio/src/pages/contact/Contact.js":"9","/Users/priska/HobbyProjects/portfolio/src/pages/about-me/AboutMe.js":"10","/Users/priska/HobbyProjects/portfolio/src/pages/projects/ProjectDetail.js":"11","/Users/priska/HobbyProjects/portfolio/src/pages/projects/project-data.js":"12"},{"size":492,"mtime":1692407894885,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1690957622196,"results":"15","hashOfConfig":"14"},{"size":3764,"mtime":1694434195167,"results":"16","hashOfConfig":"14"},{"size":4505,"mtime":1692415999499,"results":"17","hashOfConfig":"14"},{"size":2773,"mtime":1692414211643,"results":"18","hashOfConfig":"14"},{"size":1514,"mtime":1692409674594,"results":"19","hashOfConfig":"14"},{"size":511,"mtime":1692409656122,"results":"20","hashOfConfig":"14"},{"size":9695,"mtime":1694434375838,"results":"21","hashOfConfig":"14"},{"size":2185,"mtime":1693292205847,"results":"22","hashOfConfig":"14"},{"size":5297,"mtime":1693458714963,"results":"23","hashOfConfig":"14"},{"size":5592,"mtime":1693447098177,"results":"24","hashOfConfig":"14"},{"size":10365,"mtime":1694434375841,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"11r68aw",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/priska/HobbyProjects/portfolio/src/index.js",[],["54","55"],"/Users/priska/HobbyProjects/portfolio/src/reportWebVitals.js",[],"/Users/priska/HobbyProjects/portfolio/src/App.js",["56","57","58","59","60","61","62","63"],"import logo from './images/logo.png';\nimport './App.css';\nimport React from 'react'\nimport {Nav, Navbar} from 'react-bootstrap';\nimport Home from './Home.js'\nimport Projects from './pages/projects/Projects.js'\nimport AboutMe from './pages/about-me/AboutMe.js'\nimport Contact from './pages/contact/Contact.js'\n\n\nfunction App() {\n    /*let closeMenu = function (e){\n        if(e.target.closest('.navbar-toggler')){\n            return false;\n        }\n        let menu = document.getElementById('basic-navbar-nav')\n        if(menu.classList.contains('show')){\n            menu.classList.remove('show')\n        }\n    }\n    useEffect(() => {\n        window.onload = function() {\n            document.addEventListener('click',closeMenu)\n        }\n    });*/\n    return (\n            <div className=\"App\">\n                <div className=\"navigation\">\n                    <div className=\"navigation-sub\">\n                        <Navbar bg=\"light\" expand=\"md\" fixed=\"top\" className=\"bg-light justify-content-end pr-0\">\n                            <Navbar.Brand href=\"/portfolio\" className=\"flex-grow-2 text-right\">\n                                <img\n                                    src={logo}\n                                    className=\"d-inline-block align-top logo\"\n                                    alt=\"React Bootstrap logo\"\n                                />\n                            </Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                            <Navbar.Collapse id=\"basic-navbar-nav\">\n                                <Nav className=\"mr-auto flex-grow-1\">\n                                    <Nav.Link href=\"#home\" className=\"flex-grow-1 text-center\">Home</Nav.Link>\n                                    <Nav.Link href=\"#about\" className=\"flex-grow-1 text-center\">About Me</Nav.Link>\n                                    <Nav.Link href=\"#projects\" className=\"flex-grow-1 text-center\">Projects</Nav.Link>\n                                    <Nav.Link href=\"#contact\" className=\"flex-grow-1 text-center\">Contact</Nav.Link>\n                                </Nav>\n                            </Navbar.Collapse>\n                        </Navbar>\n                    </div>\n                </div>\n                <a className=\"anchor\" name=\"home\"/>\n                <Home/>\n                <a className=\"anchor\" name=\"about\"/>\n                <AboutMe/>\n                <a className=\"anchor\" name=\"projects\"/>\n                <Projects/>\n                <div id=\"project-details\"/>\n                <a className=\"anchor\" name=\"contact\"/>\n                <Contact/>\n                <footer>\n                    <div id=\"go-top\">\n                        <a className=\"smoothscroll\" title=\"Back to Top\" href=\"#home\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" fill=\"currentColor\"\n                                 className=\"bi bi-chevron-double-up\" viewBox=\"0 0 18 18\">\n                                <path fillRule=\"evenodd\"\n                                      d=\"M7.646 2.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 3.707 2.354 9.354a.5.5 0 1 1-.708-.708l6-6z\"/>\n                                <path fillRule=\"evenodd\"\n                                      d=\"M7.646 6.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 7.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/>\n                            </svg>\n                        </a>\n                    </div>\n                    {/*Copyright*/}\n                    <div className=\"text-center p-3 bg-light\">\n                        Â© 2023 Copyright: <span className=\"text-dark\">Priska Kohnen</span>\n                    </div>\n                </footer>\n            </div>\n    );\n}\n\nexport default App;","/Users/priska/HobbyProjects/portfolio/src/Home.js",["64"],"import './App.css';\nimport React, {useEffect} from 'react'\nimport {Container} from 'react-bootstrap';\n\n\n\nlet TxtType = function(el, toRotate, period) {\n        this.toRotate = toRotate;\n        this.txtBatchToggle = false;\n        this.txtBatch = 0\n        this.el = el;\n        this.period = parseInt(period, 10) || 2000;\n        this.txt = '';\n        this.step = 1;\n        this.tick();\n        this.isDeleting = false;\n    };\n\n    TxtType.prototype.tick = function() {\n        let fullTxt = this.toRotate[this.txtBatch].join(`<br/>`);\n        if (this.isDeleting) {\n            this.txt = '';\n        }\n        else if (this.txt.length === 13 && this.txtBatch === 0){\n            let end = fullTxt.lastIndexOf('$')\n            this.txt = fullTxt.substring(0, end+2);\n            console.log(this.txt.length)\n        }\n        else {\n            this.txt = fullTxt.substring(0, this.txt.length + this.step);\n        }\n\n        this.el.innerHTML = '<span class=\"wrap\">'+this.txt+'</span>';\n\n        let that = this;\n        let delta = 200 - Math.random() * 100;\n\n        if (this.isDeleting) { delta /= 2; }\n\n        if (!this.isDeleting && this.txt === fullTxt) {\n        delta = this.period;\n        this.isDeleting = true;\n        } else if (this.isDeleting && this.txt === '') {\n        this.isDeleting = false;\n        delta = 500;\n        }\n        if(this.txt === ''){\n            this.txtBatchToggle = !(this.txtBatchToggle)\n            this.txtBatch = this.txtBatchToggle ? 0 : 0;\n        }\n        if(this.txt.length === 190){\n            delta = 700\n        }\n\n        setTimeout(function() {\n        that.tick();\n        }, delta);\n    };\n\nfunction Home() {\n\n     // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {    // Update the document title using the browser API\n        window.onload = function() {\n        let elements = document.getElementsByClassName('typewrite');\n        for (let i=0; i<elements.length; i++) {\n            let toRotate = elements[i].getAttribute('datatype');\n            toRotate = JSON.parse(toRotate)\n            toRotate[0].push('<span><span style=\"color:lawngreen;\">priska</span>:<span style=\"color:mediumslateblue;\">~</span>$ clear')\n            let period = elements[i].getAttribute('data-period');\n            if (toRotate) {\n              new TxtType(elements[i], toRotate, period);\n            }\n        }\n        // INJECT CSS\n        let css = document.createElement(\"style\");\n        css.type = \"text/css\";\n        css.innerHTML = \".typewrite > .wrap { border-right: 0.08em solid #fff}\";\n        document.body.appendChild(css);\n    };\n\n//typewriter();\n    });\n  return (\n      <div className=\"Home d-flex flex-column justify-content-center\">\n          <Container fluid className=\"shell\">\n              <h1><span className=\"cl\"><span className=\"green\">priska</span>:<span className=\"blue\">~</span>$ </span>\n                  <a href=\"/\" className=\"typewrite\" data-period=\"2000\"\n                      datatype='[[\"node hello.js\", \"Hello, World!\", \"I am Priska Kohnen.\", \"A full-stack Web Developer.\"]]' aria-label=\"node hello.js Hello, World! I am Priska Kohnen. A full-stack Web Developer. clear\">{/*,[\"This is just the beginning...\"]]'>*/}\n                  <span className=\"wrap\" aria-hidden=\"true\"/>\n                  </a>\n              </h1>\n              {/*<h1>$ <span id=\"typedtext\"></span></h1>*/}\n            </Container>\n      </div>\n  );\n}\n\nexport default Home;\n\n\n\n\n\n    // set up text to print, each item in array is new line\nlet aText = [\"node hello.js\",\n\"Hello, World!\", \"I am Priska Kohnen.\", \"A full-stack Web Developer.\"];\nlet iSpeed = 100; // time delay of print out\nlet iIndex = 0; // start printing array at this posision\nlet iArrLength = aText[0].length; // the length of the text array\nlet iScrollAt = 20; // start scrolling up at this many lines\n\nlet iTextPos = 0; // initialise text position\nlet sContents = ''; // initialise contents variable\nlet iRow; // initialise current row\n\nfunction typewriter()\n{\n sContents =  ' ';\n iRow = Math.max(0, iIndex-iScrollAt);\n let destination = document.getElementById(\"typedtext\");\n\n while ( iRow < iIndex ) {\n  sContents += aText[iRow++] + '<br />';\n }\n destination.innerHTML = sContents + aText[iIndex].substring(0, iTextPos) + \"_\";\n if ( iTextPos++ === iArrLength ) {\n  iTextPos = 0;\n  iIndex++;\n  if ( iIndex !== aText.length ) {\n   iArrLength = aText[iIndex].length;\n   setTimeout(typewriter, 500);\n  }\n } else {\n  setTimeout(typewriter, iSpeed);\n }\n}\n\n\n\n\n","/Users/priska/HobbyProjects/portfolio/src/components/light-box/LightBoxWrapper.js",[],"/Users/priska/HobbyProjects/portfolio/src/components/light-box/LightBoxArrowButton.js",[],"/Users/priska/HobbyProjects/portfolio/src/components/light-box/LightBoxButtonControl.js",[],"/Users/priska/HobbyProjects/portfolio/src/pages/projects/Projects.js",[],"/Users/priska/HobbyProjects/portfolio/src/pages/contact/Contact.js",[],"/Users/priska/HobbyProjects/portfolio/src/pages/about-me/AboutMe.js",[],"/Users/priska/HobbyProjects/portfolio/src/pages/projects/ProjectDetail.js",["65"],"import React from 'react'\nimport {Button, Modal, Container, Image, Jumbotron, ButtonGroup} from 'react-bootstrap';\nimport parse from 'html-react-parser';\nimport LightBoxWrapper from \"../../components/light-box/LightBoxWrapper\";\nimport '../../App.css';\nimport {data} from \"./project-data\";\n\nexport default function  ProjectDetail(props){\n    const [show, setShow] = React.useState(props.show || false);\n    const [card, setCard] = React.useState(props.card);\n    const [showLightBox, setShowLightBox] = React.useState(false);\n    const [srcIndex, setSrcIndex] = React.useState(0);\n\n    React.useEffect(()=>{\n        if(props.show !== show) setShow(props.show);\n        if(props.card !== card) setCard(props.card);\n    },[props])\n\n    const handleClose = () => {\n        setShowLightBox(false);\n    }\n\n    const viewLightbox = (srcIndex) => {\n        console.log(srcIndex, 'true')\n        setShowLightBox(true);\n        setSrcIndex(srcIndex)\n    }\n\n    if (!(card in data)) {\n        return null\n    }\n\n    return (\n        <React.Fragment>\n            <Modal show={show} onHide={handleClose} className=\"modal-page\">\n                <div className=\"text-right pr-3\">\n                    <Button variant=\"back\" onClick={props.closeAction}>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\"\n                             className=\"bi bi-chevron-double-left\" viewBox=\"0 0 30 30\">\n                            <path fillRule=\"evenodd\"\n                                  d=\"M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\n                            <path fillRule=\"evenodd\"\n                                  d=\"M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z\"/>\n                        </svg>\n                        Back\n                    </Button>\n                </div>\n                <Jumbotron className=\"img-container2 bg-transparent\">\n                    <h1>{data[card].cardTitle}</h1>\n                    <Container\n                        className=\"d-flex flex-lg-row flex-column flex-wrap justify-content-lg-start align-items-lg-center justify-content-center align-items-start aboutme\">\n                        <div className=\"project-media\">\n                            {'vids' in data[card] ?\n                                <div className=\"video-box\" >\n                                    {data[card].vids.map((src, idx) =>\n                                        <div key={idx} className=\"project-video\">\n                                            <div className=\"overlay-text\"><span>{data[card].vidTitle[idx]}</span></div>\n                                            <video poster={data[card].poster[idx]} controls>\n                                                <source src={src} type=\"video/mp4\"/>Your browser does not support the video tag.\n                                            </video>\n                                        </div>\n                                    )}\n                                </div>\n                            : ''\n                            }\n                            {'imgs' in data[card] ?\n                                <div className=\"image-box\">\n                                    {data[card].imgs.map((src, idx) =>\n                                        <div key={idx} className=\"project-img\" onClick={() => viewLightbox(idx)}>\n                                            <div className=\"overlay-text\"><span>Click to enlarge</span></div>\n                                            <Image src={src} key={idx}/>\n                                        </div>\n                                    )}\n                                </div>\n                                : ''\n                            }\n                        </div>\n                        <div className=\"project-desc\">\n                            <p>{parse(data[card].cardText)}</p>\n                        </div>\n                        {data[card].buttonCode ?\n                            <ButtonGroup className=\"justify-content-between\">\n                                <Button\n                                    variant=\"loading\"\n                                    href={data[card].buttonCode}\n                                    target=\"_blank\"\n                                >\n                                    View Code\n                                </Button>\n                            </ButtonGroup>\n                            :\n                            null\n                        }\n                        {data[card].buttonAffiliate ?\n                            <ButtonGroup className=\"justify-content-between\">\n                                <Button\n                                    variant=\"loading\"\n                                    href={data[card].buttonAffiliate}\n                                    target=\"_blank\"\n                                >\n                                    View Affiliate Website\n                                </Button>\n                            </ButtonGroup>\n                            :\n                            null\n                        }\n                    </Container>\n                </Jumbotron>\n                <LightBoxWrapper\n                    isOpen={showLightBox}\n                    srcIndex={srcIndex}\n                    card={data[card]}\n                    handleClose={handleClose}\n                />\n            </Modal>\n        </React.Fragment>\n    )\n}","/Users/priska/HobbyProjects/portfolio/src/pages/projects/project-data.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":50,"column":17,"nodeType":"72","endLine":50,"endColumn":52},{"ruleId":"73","severity":1,"message":"74","line":50,"column":17,"nodeType":"72","endLine":50,"endColumn":52},{"ruleId":"70","severity":1,"message":"71","line":52,"column":17,"nodeType":"72","endLine":52,"endColumn":53},{"ruleId":"73","severity":1,"message":"74","line":52,"column":17,"nodeType":"72","endLine":52,"endColumn":53},{"ruleId":"70","severity":1,"message":"71","line":54,"column":17,"nodeType":"72","endLine":54,"endColumn":56},{"ruleId":"73","severity":1,"message":"74","line":54,"column":17,"nodeType":"72","endLine":54,"endColumn":56},{"ruleId":"70","severity":1,"message":"71","line":57,"column":17,"nodeType":"72","endLine":57,"endColumn":55},{"ruleId":"73","severity":1,"message":"74","line":57,"column":17,"nodeType":"72","endLine":57,"endColumn":55},{"ruleId":"75","severity":1,"message":"76","line":117,"column":10,"nodeType":"77","messageId":"78","endLine":117,"endColumn":20},{"ruleId":"79","severity":1,"message":"80","line":17,"column":7,"nodeType":"81","endLine":17,"endColumn":14,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-unused-vars","'typewriter' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'card' and 'show'. Either include them or remove the dependency array.","ArrayExpression",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [card, props, show]",{"range":"88","text":"89"},[719,726],"[card, props, show]"]